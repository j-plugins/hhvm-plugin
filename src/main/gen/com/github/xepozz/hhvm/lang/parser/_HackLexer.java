// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HackLexer.flex

package com.github.xepozz.hhvm.lang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.xepozz.hhvm.lang.psi.HackTypes.*;


public class _HackLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\6\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\43\1\46\1\43\1\47\3\43\1\50\1\51"+
    "\1\52\1\53\2\43\1\54\2\43\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\43\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\43\1\113\1\114\1\115"+
    "\1\116\1\0\5\43\1\117\32\43\1\120\137\43\u0180\0"+
    "\1\1\177\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0\u0100\121";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\30\1\31\1\32\1\33\1\34"+
    "\1\1\23\30\1\35\1\36\1\37\1\40\1\2\1\41"+
    "\1\0\1\42\1\0\1\43\1\44\1\45\1\46\1\0"+
    "\1\42\11\0\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\0\1\56\1\57\1\0\1\60\1\61\2\0"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\0"+
    "\1\71\1\72\1\0\1\30\1\73\1\0\1\74\2\30"+
    "\1\75\12\30\1\76\11\30\1\77\2\30\1\100\33\30"+
    "\1\101\1\102\1\103\1\104\1\20\6\0\1\42\1\105"+
    "\1\106\2\0\1\56\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\14\30\1\117\12\30\1\120\5\30"+
    "\1\121\3\30\1\122\4\30\1\123\20\30\1\124\3\30"+
    "\1\125\2\30\1\126\3\30\1\127\1\30\1\104\1\20"+
    "\10\0\1\130\5\30\1\131\1\30\1\132\10\30\1\133"+
    "\1\30\1\134\1\135\1\136\21\30\1\137\11\30\1\140"+
    "\10\30\1\141\3\30\1\142\3\30\2\20\4\0\2\30"+
    "\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\30"+
    "\1\152\6\30\1\153\1\154\4\30\1\155\3\30\1\156"+
    "\6\30\1\157\3\30\1\160\3\30\1\161\2\30\1\162"+
    "\1\30\1\163\1\164\1\165\1\166\1\167\1\30\1\170"+
    "\1\171\1\172\1\0\1\173\1\174\1\175\4\30\1\176"+
    "\2\30\1\177\11\30\1\200\5\30\1\201\2\30\1\202"+
    "\2\30\1\203\1\204\1\205\1\206\1\207\1\210\4\30"+
    "\1\211\1\212\1\213\1\214\1\215\2\30\1\216\4\30"+
    "\1\217\1\220\1\30\1\221\1\222\1\30\1\223\1\30"+
    "\1\224\1\225\1\30\1\226\1\227\4\30\1\230\1\30"+
    "\1\231\2\30\1\232\3\30\1\233\1\234\1\235\1\236"+
    "\1\30\1\237\1\240\4\30\1\241\1\242";

  private static int [] zzUnpackAction() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\122\0\u019a\0\u01ec"+
    "\0\u023e\0\u0290\0\122\0\122\0\u02e2\0\u0334\0\122\0\u0386"+
    "\0\u03d8\0\u042a\0\u047c\0\u04ce\0\u0520\0\122\0\u0572\0\u05c4"+
    "\0\u0616\0\u0668\0\122\0\u06ba\0\u070c\0\122\0\122\0\122"+
    "\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c"+
    "\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda\0\u0c2c"+
    "\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\122\0\u0e18\0\122"+
    "\0\122\0\u0e6a\0\u0ebc\0\u0148\0\122\0\u0f0e\0\122\0\122"+
    "\0\122\0\122\0\u0f60\0\u0fb2\0\u1004\0\u1056\0\u10a8\0\u10fa"+
    "\0\u114c\0\u119e\0\u11f0\0\u1242\0\u1294\0\u12e6\0\122\0\122"+
    "\0\122\0\122\0\122\0\122\0\u1338\0\u138a\0\122\0\u13dc"+
    "\0\u142e\0\122\0\u047c\0\u1480\0\122\0\u14d2\0\u1524\0\u1576"+
    "\0\122\0\122\0\u15c8\0\u161a\0\122\0\u166c\0\u16be\0\u1710"+
    "\0\122\0\u07b0\0\122\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa"+
    "\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a"+
    "\0\u06ba\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1d78"+
    "\0\u1dca\0\u1e1c\0\u06ba\0\u1e6e\0\u1ec0\0\u06ba\0\u1f12\0\u1f64"+
    "\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4"+
    "\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484"+
    "\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714"+
    "\0\u2766\0\122\0\122\0\122\0\u27b8\0\u280a\0\u285c\0\u28ae"+
    "\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u0f60\0\122\0\122\0\u2a48"+
    "\0\u2a9a\0\u2a9a\0\122\0\122\0\122\0\122\0\122\0\122"+
    "\0\122\0\122\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86"+
    "\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72\0\u06ba\0\u2ec4"+
    "\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102\0\u3154"+
    "\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392\0\u33e4"+
    "\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674"+
    "\0\u06ba\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2"+
    "\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42"+
    "\0\u3b94\0\u06ba\0\u3be6\0\u3c38\0\u3c8a\0\u06ba\0\u3cdc\0\u3d2e"+
    "\0\u06ba\0\u3d80\0\u3dd2\0\u3e24\0\u06ba\0\u3e76\0\122\0\u3ec8"+
    "\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\u4106\0\u4158"+
    "\0\122\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u42f2\0\u06ba\0\u4344"+
    "\0\u06ba\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530\0\u4582"+
    "\0\u45d4\0\u06ba\0\u4626\0\u06ba\0\u4678\0\u06ba\0\u46ca\0\u471c"+
    "\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6\0\u4908\0\u495a\0\u49ac"+
    "\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea\0\u06ba"+
    "\0\u4c3c\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6\0\u4e28\0\u4e7a"+
    "\0\u4ecc\0\u06ba\0\u4f1e\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8"+
    "\0\u510a\0\u515c\0\u06ba\0\u51ae\0\u5200\0\u5252\0\u06ba\0\u52a4"+
    "\0\u52f6\0\u5348\0\u3f1a\0\u3f6c\0\u539a\0\u53ec\0\u543e\0\u5490"+
    "\0\u54e2\0\u5534\0\u5586\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\u06ba"+
    "\0\u06ba\0\u55d8\0\u06ba\0\u562a\0\u567c\0\u56ce\0\u5720\0\u5772"+
    "\0\u57c4\0\u5816\0\u06ba\0\u5868\0\u58ba\0\u590c\0\u595e\0\u06ba"+
    "\0\u59b0\0\u5a02\0\u5a54\0\u06ba\0\u5aa6\0\u5af8\0\u5b4a\0\u5b9c"+
    "\0\u5bee\0\u5c40\0\u06ba\0\u5c92\0\u5ce4\0\u5d36\0\u06ba\0\u5d88"+
    "\0\u5dda\0\u5e2c\0\u06ba\0\u5e7e\0\u5ed0\0\u06ba\0\u5f22\0\u06ba"+
    "\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\u5f74\0\u06ba\0\u06ba\0\u06ba"+
    "\0\u5fc6\0\122\0\122\0\u06ba\0\u6018\0\u606a\0\u60bc\0\u610e"+
    "\0\u06ba\0\u6160\0\u61b2\0\u06ba\0\u6204\0\u6256\0\u62a8\0\u62fa"+
    "\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494\0\u06ba\0\u64e6\0\u6538"+
    "\0\u658a\0\u65dc\0\u662e\0\u06ba\0\u6680\0\u66d2\0\u06ba\0\u6724"+
    "\0\u6776\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\122\0\u67c8"+
    "\0\u681a\0\u686c\0\u68be\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\u06ba"+
    "\0\u6910\0\u6962\0\u69b4\0\u6a06\0\u6a58\0\u6aaa\0\u6afc\0\u06ba"+
    "\0\u06ba\0\u6b4e\0\u06ba\0\u06ba\0\u6ba0\0\u6bf2\0\u6c44\0\u06ba"+
    "\0\u06ba\0\u6c96\0\u06ba\0\u06ba\0\u6ce8\0\u6d3a\0\u6d8c\0\u6dde"+
    "\0\u06ba\0\u6e30\0\u06ba\0\u6e82\0\u6ed4\0\u06ba\0\u6f26\0\u6f78"+
    "\0\u6fca\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\u701c\0\u06ba\0\u06ba"+
    "\0\u706e\0\u70c0\0\u7112\0\u7164\0\u06ba\0\u06ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\14\34\1\35\2\34\1\36\1\37\1\40"+
    "\1\41\1\34\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\34\1\51\1\52\1\34\1\53\1\54\1\34"+
    "\1\55\1\34\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\2\72\1\2"+
    "\123\0\3\3\113\0\2\3\33\0\1\73\67\0\5\74"+
    "\1\75\50\74\1\76\43\74\7\0\1\77\144\0\1\100"+
    "\100\0\1\101\20\0\1\102\67\0\12\103\1\104\10\103"+
    "\1\105\5\103\1\106\10\103\1\107\4\103\1\110\2\103"+
    "\1\111\3\103\1\112\11\103\1\113\6\103\1\114\5\103"+
    "\1\115\14\103\15\0\1\116\14\0\1\117\105\0\1\120"+
    "\13\0\1\121\107\0\1\122\11\0\1\123\1\124\107\0"+
    "\1\125\1\0\4\126\3\0\1\127\104\0\1\130\4\0"+
    "\1\131\7\0\1\132\110\0\1\126\1\0\4\133\12\0"+
    "\1\134\25\0\1\134\53\0\1\126\1\0\4\24\12\0"+
    "\1\134\25\0\1\134\61\0\1\135\123\0\1\136\1\137"+
    "\121\0\1\140\1\141\120\0\1\142\1\143\106\0\1\144"+
    "\6\0\1\145\4\0\1\146\26\0\1\147\61\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\30\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\150\1\0\30\34"+
    "\4\0\2\34\33\0\1\151\67\0\62\152\1\153\37\152"+
    "\23\0\4\34\7\0\17\34\4\0\1\34\1\0\1\34"+
    "\1\154\16\34\1\155\1\156\3\34\1\157\2\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\15\34\1\160\2\34\1\161\7\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\162\11\34"+
    "\1\163\2\34\1\164\4\34\1\165\5\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\1\166"+
    "\3\34\1\167\3\34\1\170\4\34\1\171\11\34\1\172"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\2\34\1\173\7\34\1\174\1\34\1\175\11\34"+
    "\1\176\1\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\10\34\1\177\1\34\1\200\2\34"+
    "\1\201\5\34\1\202\4\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\5\34\1\203\5\34"+
    "\1\204\1\205\4\34\1\206\6\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\4\34\1\207"+
    "\23\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\10\34\1\210\17\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\211\3\34"+
    "\1\212\10\34\1\213\5\34\1\214\4\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\1\215"+
    "\17\34\1\216\2\34\1\217\4\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\4\34\1\220"+
    "\23\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\4\34\1\221\2\34\1\222\12\34\1\223"+
    "\1\224\1\34\1\225\2\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\7\34\1\226\10\34"+
    "\1\227\2\34\1\230\3\34\1\231\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\14\34\1\232"+
    "\4\34\1\233\6\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\1\234\3\34\1\235\10\34"+
    "\1\236\12\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\7\34\1\237\20\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\7\34"+
    "\1\240\20\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\10\34\1\241\17\34\4\0\2\34"+
    "\33\0\1\242\61\0\1\243\6\0\3\3\17\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\30\34\4\0\2\72"+
    "\33\0\1\244\67\0\2\74\2\0\113\74\1\0\1\74"+
    "\1\0\12\103\1\75\43\103\1\112\43\103\44\0\1\245"+
    "\25\0\1\245\27\0\12\103\1\246\43\103\1\112\55\103"+
    "\1\104\43\103\1\112\55\103\1\75\23\103\1\247\17\103"+
    "\1\112\4\103\1\250\50\103\1\75\40\103\1\251\2\103"+
    "\1\112\27\103\1\252\25\103\1\75\35\103\1\253\5\103"+
    "\1\112\24\103\1\254\30\103\1\255\43\103\1\112\55\103"+
    "\1\75\43\103\1\112\4\103\1\250\50\103\1\75\43\103"+
    "\1\112\27\103\1\252\25\103\1\75\43\103\1\112\24\103"+
    "\1\254\16\103\32\0\1\256\110\0\1\257\123\0\4\126"+
    "\12\0\1\134\25\0\1\134\32\0\15\130\1\260\104\130"+
    "\2\131\1\0\117\131\16\0\1\261\1\0\1\261\2\0"+
    "\4\262\125\0\1\263\122\0\1\264\120\0\1\265\1\266"+
    "\120\0\1\267\122\0\1\270\120\0\1\271\173\0\1\272"+
    "\40\0\4\34\7\0\10\34\1\273\6\34\4\0\1\34"+
    "\1\0\30\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\21\34\1\274\6\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\20\34"+
    "\1\275\7\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\27\34\1\276\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\277\27\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\15\34\1\300\12\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\4\34\1\301\23\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\21\34\1\302\1\303\5\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\304\14\34"+
    "\1\305\12\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\306\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\26\34"+
    "\1\307\1\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\20\34\1\310\7\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\5\34"+
    "\1\311\22\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\2\34\1\312\25\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\313\13\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\7\34\1\314\20\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\21\34"+
    "\1\315\6\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\23\34\1\316\4\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\22\34"+
    "\1\317\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\320\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\15\34"+
    "\1\321\12\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\20\34\1\322\7\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\323\13\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\16\34\1\324\11\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\2\34"+
    "\1\325\12\34\1\326\3\34\1\327\1\330\5\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\27\34\1\331\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\26\34\1\332\1\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\13\34"+
    "\1\333\14\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\25\34\1\334\2\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\335\3\34\1\336\1\34\1\337\5\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\12\34"+
    "\1\340\1\341\14\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\20\34\1\342\7\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\10\34\1\343\4\34\1\344\12\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\34\1\345"+
    "\26\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\10\34\1\346\6\34\1\347\1\34\1\350"+
    "\1\351\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\12\34\1\352\15\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\1\353"+
    "\27\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\1\354\17\34\1\355\7\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\16\34"+
    "\1\356\11\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\10\34\1\357\17\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\20\34"+
    "\1\360\7\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\1\361\26\34\1\362\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\16\34"+
    "\1\363\11\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\16\34\1\364\11\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\21\34"+
    "\1\365\6\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\366\3\34\1\367\17\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\20\34\1\370\7\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\2\34\1\371\25\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\10\34\1\372\17\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\4\34\1\373\3\34"+
    "\1\374\17\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\16\34\1\375\11\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\376\23\34\4\0\2\34\45\0\1\377\25\0\1\377"+
    "\52\0\3\u0100\11\0\1\u0101\14\0\1\u0102\7\0\1\u0101"+
    "\24\0\1\u0102\10\0\12\103\1\75\33\103\1\u0103\7\103"+
    "\1\112\55\103\1\75\43\103\1\112\16\103\1\u0104\36\103"+
    "\1\75\33\103\1\u0105\7\103\1\112\55\103\1\75\43\103"+
    "\1\112\16\103\1\u0106\36\103\1\75\40\103\1\u0107\2\103"+
    "\1\112\55\103\1\75\43\103\1\112\27\103\1\u0108\13\103"+
    "\15\130\1\260\4\130\1\u0109\77\130\23\0\4\262\116\0"+
    "\4\34\7\0\7\34\1\u010a\7\34\4\0\1\34\1\0"+
    "\30\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\22\34\1\u010b\5\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\u010c\27\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\14\34\1\u010d\13\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\10\34\1\u010e\17\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\12\34\1\u010f\15\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\1\u0110\27\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\4\34\1\u0111\23\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\2\34\1\u0112\25\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\21\34\1\u0113\6\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\14\34\1\u0114\13\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\2\34\1\u0115\16\34\1\u0116\1\u0117\5\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\20\34"+
    "\1\u0118\7\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\1\u0119\27\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\22\34\1\u011a"+
    "\5\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\1\u011b\27\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\15\34\1\u011c\12\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\4\34\1\u011d\23\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\13\34\1\u011e\14\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\4\34\1\u011f\23\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\1\u0120\27\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\1\u0121\27\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u0122\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\2\34"+
    "\1\u0123\25\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\12\34\1\u0124\15\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\12\34"+
    "\1\u0125\15\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\23\34\1\u0126\4\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\22\34"+
    "\1\u0127\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u0128\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\21\34"+
    "\1\u0129\6\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u012a\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u012b\23\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\22\34\1\u012c\5\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\u012d\13\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u012e\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\7\34"+
    "\1\u012f\20\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\12\34\1\u0130\15\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u0131\23\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\u0132\7\34\1\u0133\3\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\22\34\1\u0134\5\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\12\34\1\u0135\15\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\5\34\1\u0136\22\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\23\34\1\u0137\4\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\15\34\1\u0138\12\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\23\34\1\u0139\4\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\5\34\1\u013a\22\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\16\34\1\u013b\11\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\22\34\1\u013c\5\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\10\34\1\u013d\17\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\4\34\1\u013e\23\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\22\34\1\u013f\5\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\15\34\1\u0140\12\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\10\34\1\u0141\17\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\12\34\1\u0142\15\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\4\34\1\u0143\23\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\4\34\1\u0144\23\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\14\34\1\u0145\13\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\20\34\1\u0146\7\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\3\34\1\u0147\24\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\20\34\1\u0148\7\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\12\34\1\u0149\15\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\12\34\1\u014a\15\34\4\0\2\34\24\0\3\u0100"+
    "\117\0\2\u014b\120\0\4\u014c\7\0\5\u014c\20\0\6\u014c"+
    "\31\0\12\103\1\75\36\103\1\u014d\4\103\1\112\55\103"+
    "\1\75\43\103\1\112\25\103\1\u014e\27\103\1\75\33\103"+
    "\1\u014f\7\103\1\112\55\103\1\75\43\103\1\112\16\103"+
    "\1\u014f\36\103\1\75\26\103\1\u0150\14\103\1\112\55\103"+
    "\1\75\43\103\1\112\10\103\1\u0150\32\103\23\0\4\34"+
    "\7\0\13\34\1\u0151\3\34\4\0\1\34\1\0\30\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\20\34\1\u0152\7\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\27\34\1\u0153\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\2\34\1\u0154\25\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\22\34\1\u0155\5\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\11\34\1\u0156\16\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\7\34\1\u0157\20\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\21\34\1\u0158\6\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\4\34\1\u0159\23\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\23\34\1\u015a\4\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\22\34\1\u015b\5\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\10\34\1\u015c\17\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\1\u015d\27\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\23\34"+
    "\1\u015e\4\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\13\34\1\u015f\14\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\10\34"+
    "\1\u0160\17\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\u0161\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\12\34"+
    "\1\u0162\15\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\22\34\1\u0163\5\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\1\u0164"+
    "\27\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\22\34\1\u0165\5\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\4\34\1\u0166"+
    "\23\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\23\34\1\u0167\4\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\22\34\1\u0168"+
    "\5\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\4\34\1\u0169\23\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\20\34\1\u016a"+
    "\7\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\4\34\1\u016b\23\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\3\34\1\u016c"+
    "\24\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\21\34\1\u016d\6\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\27\34\1\u016e"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\23\34\1\u016f\4\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\22\34\1\u0170\5\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\10\34\1\u0171\17\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\14\34\1\u0172\13\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\22\34\1\u0173\5\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\1\u0174\27\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\4\34\1\u0175\23\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\10\34\1\u0176\17\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\27\34\1\u0177\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\10\34\1\u0178\17\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\23\34"+
    "\1\u0179\4\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\20\34\1\u017a\7\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u017b\23\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\10\34\1\u017c\17\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\u017d\13\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\20\34\1\u017e\7\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\2\34"+
    "\1\u017f\25\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\25\34\1\u0180\2\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\22\34"+
    "\1\u0181\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u0182\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\22\34"+
    "\1\u0183\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\6\34\1\u0184\21\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\1\u0185"+
    "\27\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\4\34\1\u0186\23\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\4\34\1\u0187"+
    "\23\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\3\34\1\u0188\24\34\4\0\2\34\1\0"+
    "\12\103\1\75\26\103\1\u0189\14\103\1\112\55\103\1\75"+
    "\43\103\1\112\10\103\1\u0189\44\103\1\u018a\43\103\1\112"+
    "\55\103\1\u018b\43\103\1\112\43\103\23\0\4\34\7\0"+
    "\14\34\1\u018c\2\34\4\0\1\34\1\0\30\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\1\u018d\27\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\11\34\1\u018e\16\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\20\34"+
    "\1\u018f\7\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\u0190\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\27\34"+
    "\1\u0191\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\12\34\1\u0192\15\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\10\34\1\u0193"+
    "\17\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\5\34\1\u0194\22\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\3\34\1\u0195"+
    "\24\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\12\34\1\u0196\15\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\2\34\1\u0197"+
    "\25\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\10\34\1\u0198\17\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\13\34\1\u0199"+
    "\14\34\4\0\2\34\24\0\4\34\7\0\17\34\4\0"+
    "\1\34\1\0\3\34\1\u019a\24\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\u019b\27\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\5\34\1\u019c\6\34\1\u019d\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\22\34"+
    "\1\u019e\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\16\34\1\u019f\11\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\16\34"+
    "\1\u01a0\11\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\12\34\1\u01a1\15\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\23\34"+
    "\1\u01a2\4\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\u01a3\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\22\34"+
    "\1\u01a4\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\22\34\1\u01a5\5\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\2\34"+
    "\1\u01a6\25\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\2\34\1\u01a7\25\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\20\34"+
    "\1\u01a8\7\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\20\34\1\u01a9\7\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\u01aa\13\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\2\34\1\u01ab\25\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\6\34"+
    "\1\u01ac\21\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\7\34\1\u01ad\20\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\27\34"+
    "\1\u01ae\4\0\2\34\1\0\12\103\1\u01af\43\103\1\112"+
    "\43\103\23\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\2\34\1\u01b0\25\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\4\34\1\u01b1\23\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\20\34\1\u01b2\7\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\23\34\1\u01b3\4\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\22\34\1\u01b4\5\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\2\34\1\u01b5\25\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\21\34\1\u01b6\6\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\27\34\1\u01b7\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\7\34"+
    "\1\u01b8\20\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\15\34\1\u01b9\12\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u01ba\23\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u01bb\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\3\34"+
    "\1\u01bc\24\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\1\u01bd\27\34\4\0\2\34\24\0"+
    "\4\34\7\0\17\34\4\0\1\34\1\0\1\u01be\27\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\1\u01bf\27\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\4\34\1\u01c0\23\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\12\34\1\u01c1\15\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\20\34\1\u01c2\7\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\6\34\1\u01c3\21\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\4\34\1\u01c4\23\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\22\34\1\u01c5\5\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\4\34\1\u01c6\23\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\2\34\1\u01c7\25\34\4\0\2\34\24\0\4\34\7\0"+
    "\17\34\4\0\1\34\1\0\22\34\1\u01c8\5\34\4\0"+
    "\2\34\24\0\4\34\7\0\17\34\4\0\1\34\1\0"+
    "\27\34\1\u01c9\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u01ca\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u01cb\23\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\u01cc\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\u01cd\13\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\u01ce\1\0\30\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\15\34\1\u01cf\12\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\2\34\1\u01d0\25\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\12\34\1\u01d1\15\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\2\34\1\u01d2\25\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\34\1\0\14\34\1\u01d3\13\34"+
    "\4\0\2\34\24\0\4\34\7\0\17\34\4\0\1\34"+
    "\1\0\4\34\1\u01d4\23\34\4\0\2\34\24\0\4\34"+
    "\7\0\17\34\4\0\1\u01d5\1\0\30\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u01d6\23\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\u01d7\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\22\34"+
    "\1\u01d8\5\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\15\34\1\u01d9\12\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\5\34"+
    "\1\u01da\22\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u01db\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u01dc\23\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\3\34\1\u01dd\24\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\15\34"+
    "\1\u01de\12\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\22\34\1\u01df\5\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\21\34"+
    "\1\u01e0\6\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\14\34\1\u01e1\13\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\14\34"+
    "\1\u01e2\13\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\2\34\1\u01e3\25\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\2\34"+
    "\1\u01e4\25\34\4\0\2\34\24\0\4\34\7\0\17\34"+
    "\4\0\1\34\1\0\4\34\1\u01e5\23\34\4\0\2\34"+
    "\24\0\4\34\7\0\17\34\4\0\1\34\1\0\4\34"+
    "\1\u01e6\23\34\4\0\2\34\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[29110];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\2\11\2\1\1\11"+
    "\6\1\1\11\4\1\1\11\2\1\3\11\25\1\1\11"+
    "\1\1\2\11\2\1\1\0\1\11\1\0\4\11\1\0"+
    "\1\1\11\0\1\1\6\11\1\0\1\1\1\11\1\0"+
    "\1\1\1\11\2\0\1\11\3\1\2\11\1\1\1\0"+
    "\1\11\1\1\1\0\1\1\1\11\1\0\1\11\66\1"+
    "\3\11\2\1\6\0\1\1\2\11\2\0\1\1\10\11"+
    "\104\1\1\11\1\1\10\0\1\11\103\1\4\0\70\1"+
    "\1\0\2\11\43\1\1\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _HackLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HackLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 163: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 164: break;
          case 3:
            { return T_EM;
            }
          // fall through
          case 165: break;
          case 4:
            { return T_SHARP;
            }
          // fall through
          case 166: break;
          case 5:
            { return T_DOLLAR;
            }
          // fall through
          case 167: break;
          case 6:
            { return T_PERCENT;
            }
          // fall through
          case 168: break;
          case 7:
            { return T_BIT_AND;
            }
          // fall through
          case 169: break;
          case 8:
            { return T_LPAREN;
            }
          // fall through
          case 170: break;
          case 9:
            { return T_RPAREN;
            }
          // fall through
          case 171: break;
          case 10:
            { return T_MUL;
            }
          // fall through
          case 172: break;
          case 11:
            { return T_PLUS;
            }
          // fall through
          case 173: break;
          case 12:
            { return T_COMMA;
            }
          // fall through
          case 174: break;
          case 13:
            { return T_MINUS;
            }
          // fall through
          case 175: break;
          case 14:
            { return T_DOT;
            }
          // fall through
          case 176: break;
          case 15:
            { return T_DIV;
            }
          // fall through
          case 177: break;
          case 16:
            { return INTEGER;
            }
          // fall through
          case 178: break;
          case 17:
            { return T_COLON;
            }
          // fall through
          case 179: break;
          case 18:
            { return T_SEMICOLON;
            }
          // fall through
          case 180: break;
          case 19:
            { return T_LT;
            }
          // fall through
          case 181: break;
          case 20:
            { return T_EQ;
            }
          // fall through
          case 182: break;
          case 21:
            { return T_GT;
            }
          // fall through
          case 183: break;
          case 22:
            { return T_QM;
            }
          // fall through
          case 184: break;
          case 23:
            { return T_AT;
            }
          // fall through
          case 185: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 186: break;
          case 25:
            { return T_LBRACKET;
            }
          // fall through
          case 187: break;
          case 26:
            { return T_BACKSLASH;
            }
          // fall through
          case 188: break;
          case 27:
            { return T_RBRACKET;
            }
          // fall through
          case 189: break;
          case 28:
            { return T_BIT_NOT;
            }
          // fall through
          case 190: break;
          case 29:
            { return T_LBRACE;
            }
          // fall through
          case 191: break;
          case 30:
            { return T_BIT_OR;
            }
          // fall through
          case 192: break;
          case 31:
            { return T_RBRACE;
            }
          // fall through
          case 193: break;
          case 32:
            { return T_TILDA;
            }
          // fall through
          case 194: break;
          case 33:
            { return T_NEQ;
            }
          // fall through
          case 195: break;
          case 34:
            { return STRING;
            }
          // fall through
          case 196: break;
          case 35:
            { return T_DOLLAR_DOLLAR;
            }
          // fall through
          case 197: break;
          case 36:
            { return T_PERCENT_ASSIGN;
            }
          // fall through
          case 198: break;
          case 37:
            { return T_AND;
            }
          // fall through
          case 199: break;
          case 38:
            { return T_BIT_AND_ASSIGN;
            }
          // fall through
          case 200: break;
          case 39:
            { return T_POW;
            }
          // fall through
          case 201: break;
          case 40:
            { return T_MUL_ASSIGN;
            }
          // fall through
          case 202: break;
          case 41:
            { return T_PLUS_PLUS;
            }
          // fall through
          case 203: break;
          case 42:
            { return T_PLUS_ASSIGN;
            }
          // fall through
          case 204: break;
          case 43:
            { return T_MINUS_MINUS;
            }
          // fall through
          case 205: break;
          case 44:
            { return T_MINUS_ASSIGN;
            }
          // fall through
          case 206: break;
          case 45:
            { return T_CHAIN;
            }
          // fall through
          case 207: break;
          case 46:
            { return FLOAT;
            }
          // fall through
          case 208: break;
          case 47:
            { return T_APPEND_ASSIGN;
            }
          // fall through
          case 209: break;
          case 48:
            { return INLINE_COMMENT;
            }
          // fall through
          case 210: break;
          case 49:
            { return T_DIV_ASSIGN;
            }
          // fall through
          case 211: break;
          case 50:
            { return T_COLON_COLON;
            }
          // fall through
          case 212: break;
          case 51:
            { return T_LT_LT;
            }
          // fall through
          case 213: break;
          case 52:
            { return T_LT_EQ;
            }
          // fall through
          case 214: break;
          case 53:
            { return T_EQ_EQ;
            }
          // fall through
          case 215: break;
          case 54:
            { return T_GT_ET;
            }
          // fall through
          case 216: break;
          case 55:
            { return T_GT_EQ;
            }
          // fall through
          case 217: break;
          case 56:
            { return T_GT_GT;
            }
          // fall through
          case 218: break;
          case 57:
            { return T_OR_VALUE;
            }
          // fall through
          case 219: break;
          case 58:
            { return T_QQ;
            }
          // fall through
          case 220: break;
          case 59:
            { return T_BIT_NOT_ASSIGN;
            }
          // fall through
          case 221: break;
          case 60:
            { return EXPRESSION_TREE_IDENTIFIER;
            }
          // fall through
          case 222: break;
          case 61:
            { return T_AS;
            }
          // fall through
          case 223: break;
          case 62:
            { return T_DO;
            }
          // fall through
          case 224: break;
          case 63:
            { return T_IF;
            }
          // fall through
          case 225: break;
          case 64:
            { return T_IS;
            }
          // fall through
          case 226: break;
          case 65:
            { return T_BIT_OR_ASSIGN;
            }
          // fall through
          case 227: break;
          case 66:
            { return T_OR;
            }
          // fall through
          case 228: break;
          case 67:
            { return T_NEQ_STRICT;
            }
          // fall through
          case 229: break;
          case 68:
            { return OPEN_TAG;
            }
          // fall through
          case 230: break;
          case 69:
            { return T_POW_ASSIGN;
            }
          // fall through
          case 231: break;
          case 70:
            { return T_THREE_DOTS;
            }
          // fall through
          case 232: break;
          case 71:
            { return T_BIT_MUL_ASSIGN;
            }
          // fall through
          case 233: break;
          case 72:
            { return T_SPASESHIP;
            }
          // fall through
          case 234: break;
          case 73:
            { return T_EQ_STRICT;
            }
          // fall through
          case 235: break;
          case 74:
            { return T_LAMBDA;
            }
          // fall through
          case 236: break;
          case 75:
            { return T_BIT_DIV_ASSIGN;
            }
          // fall through
          case 237: break;
          case 76:
            { return T_CHAIN_OPTIONAL;
            }
          // fall through
          case 238: break;
          case 77:
            { return T_OR_VALUE_ASSIGN;
            }
          // fall through
          case 239: break;
          case 78:
            { return T_AS_OPTIONAL;
            }
          // fall through
          case 240: break;
          case 79:
            { return T_CTX;
            }
          // fall through
          case 241: break;
          case 80:
            { return T_FOR;
            }
          // fall through
          case 242: break;
          case 81:
            { return T_INT;
            }
          // fall through
          case 243: break;
          case 82:
            { return T_NEW;
            }
          // fall through
          case 244: break;
          case 83:
            { return T_NUM;
            }
          // fall through
          case 245: break;
          case 84:
            { return T_TRY;
            }
          // fall through
          case 246: break;
          case 85:
            { return T_USE;
            }
          // fall through
          case 247: break;
          case 86:
            { return T_VEC;
            }
          // fall through
          case 248: break;
          case 87:
            { return T_XHP;
            }
          // fall through
          case 249: break;
          case 88:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 250: break;
          case 89:
            { return T_BOOL;
            }
          // fall through
          case 251: break;
          case 90:
            { return T_CASE;
            }
          // fall through
          case 252: break;
          case 91:
            { return T_DICT;
            }
          // fall through
          case 253: break;
          case 92:
            { return T_ECHO;
            }
          // fall through
          case 254: break;
          case 93:
            { return T_ELSE;
            }
          // fall through
          case 255: break;
          case 94:
            { return T_ENUM;
            }
          // fall through
          case 256: break;
          case 95:
            { return T_NULL;
            }
          // fall through
          case 257: break;
          case 96:
            { return T_SELF;
            }
          // fall through
          case 258: break;
          case 97:
            { return T_TYPE;
            }
          // fall through
          case 259: break;
          case 98:
            { return T_VOID;
            }
          // fall through
          case 260: break;
          case 99:
            { return T_ARRAY;
            }
          // fall through
          case 261: break;
          case 100:
            { return T_ASYNC;
            }
          // fall through
          case 262: break;
          case 101:
            { return T_AWAIT;
            }
          // fall through
          case 263: break;
          case 102:
            { return T_BREAK;
            }
          // fall through
          case 264: break;
          case 103:
            { return T_CATCH;
            }
          // fall through
          case 265: break;
          case 104:
            { return T_CLASS;
            }
          // fall through
          case 266: break;
          case 105:
            { return T_CLONE;
            }
          // fall through
          case 267: break;
          case 106:
            { return T_CONST;
            }
          // fall through
          case 268: break;
          case 107:
            { return T_FINAL;
            }
          // fall through
          case 269: break;
          case 108:
            { return T_FLOAT;
            }
          // fall through
          case 270: break;
          case 109:
            { return T_INOUT;
            }
          // fall through
          case 271: break;
          case 110:
            { return T_MIXED;
            }
          // fall through
          case 272: break;
          case 111:
            { return T_PRINT;
            }
          // fall through
          case 273: break;
          case 112:
            { return T_REIFY;
            }
          // fall through
          case 274: break;
          case 113:
            { return T_SHAPE;
            }
          // fall through
          case 275: break;
          case 114:
            { return T_SUPER;
            }
          // fall through
          case 276: break;
          case 115:
            { return T_THROW;
            }
          // fall through
          case 277: break;
          case 116:
            { return T_TRAIT;
            }
          // fall through
          case 278: break;
          case 117:
            { return T_TUPLE;
            }
          // fall through
          case 279: break;
          case 118:
            { return T_UNSET;
            }
          // fall through
          case 280: break;
          case 119:
            { return T_USING;
            }
          // fall through
          case 281: break;
          case 120:
            { return T_WHERE;
            }
          // fall through
          case 282: break;
          case 121:
            { return T_WHILE;
            }
          // fall through
          case 283: break;
          case 122:
            { return T_YIELD;
            }
          // fall through
          case 284: break;
          case 123:
            { return NULL;
            }
          // fall through
          case 285: break;
          case 124:
            { return TRUE;
            }
          // fall through
          case 286: break;
          case 125:
            { return T_LIST;
            }
          // fall through
          case 287: break;
          case 126:
            { return T_DARRAY;
            }
          // fall through
          case 288: break;
          case 127:
            { return T_ELSEIF;
            }
          // fall through
          case 289: break;
          case 128:
            { return T_KEYSET;
            }
          // fall through
          case 290: break;
          case 129:
            { return T_PARENT;
            }
          // fall through
          case 291: break;
          case 130:
            { return T_PUBLIC;
            }
          // fall through
          case 292: break;
          case 131:
            { return T_RETURN;
            }
          // fall through
          case 293: break;
          case 132:
            { return T_STATIC;
            }
          // fall through
          case 294: break;
          case 133:
            { return T_STRING;
            }
          // fall through
          case 295: break;
          case 134:
            { return T_SWITCH;
            }
          // fall through
          case 296: break;
          case 135:
            { return T_VARRAY;
            }
          // fall through
          case 297: break;
          case 136:
            { return FALSE;
            }
          // fall through
          case 298: break;
          case 137:
            { return T_DEFAULT;
            }
          // fall through
          case 299: break;
          case 138:
            { return T_DYNAMIC;
            }
          // fall through
          case 300: break;
          case 139:
            { return T_EXTENDS;
            }
          // fall through
          case 301: break;
          case 140:
            { return T_FINALLY;
            }
          // fall through
          case 302: break;
          case 141:
            { return T_FOREACH;
            }
          // fall through
          case 303: break;
          case 142:
            { return T_INCLUDE;
            }
          // fall through
          case 304: break;
          case 143:
            { return T_NEWTYPE;
            }
          // fall through
          case 305: break;
          case 144:
            { return T_NONNULL;
            }
          // fall through
          case 306: break;
          case 145:
            { return T_NOTHING;
            }
          // fall through
          case 307: break;
          case 146:
            { return T_PRIVATE;
            }
          // fall through
          case 308: break;
          case 147:
            { return T_REQUIRE;
            }
          // fall through
          case 309: break;
          case 148:
            { return T_ABSTRACT;
            }
          // fall through
          case 310: break;
          case 149:
            { return T_ARRAYKEY;
            }
          // fall through
          case 311: break;
          case 150:
            { return T_CONTINUE;
            }
          // fall through
          case 312: break;
          case 151:
            { return T_FUNCTION;
            }
          // fall through
          case 313: break;
          case 152:
            { return T_INTERNAL;
            }
          // fall through
          case 314: break;
          case 153:
            { return T_NORETURN;
            }
          // fall through
          case 315: break;
          case 154:
            { return T_RESOURCE;
            }
          // fall through
          case 316: break;
          case 155:
            { return T_INSTEADOF;
            }
          // fall through
          case 317: break;
          case 156:
            { return T_INTERFACE;
            }
          // fall through
          case 318: break;
          case 157:
            { return T_NAMESPACE;
            }
          // fall through
          case 319: break;
          case 158:
            { return T_PROTECTED;
            }
          // fall through
          case 320: break;
          case 159:
            { return T_CONCURRENT;
            }
          // fall through
          case 321: break;
          case 160:
            { return T_IMPLEMENTS;
            }
          // fall through
          case 322: break;
          case 161:
            { return T_INCLUDE_ONCE;
            }
          // fall through
          case 323: break;
          case 162:
            { return T_REQUIRE_ONCE;
            }
          // fall through
          case 324: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
