// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HackLexer.flex

package com.github.xepozz.hhvm.lang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.xepozz.hhvm.lang.psi.HackTypes.*;


public class _HackLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\6\22"+
    "\2\23\1\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\2\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\37\1\42\1\37\1\43\3\37\1\44\1\45\1\46"+
    "\1\47\2\37\1\50\2\37\1\51\1\52\1\53\1\0"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\37\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\37\1\106\1\0\1\107\2\0"+
    "\5\37\1\110\32\37\1\111\137\37\u0180\0\1\1\177\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0\u0100\112";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\22\1\23\1\24"+
    "\1\25\1\1\23\22\1\26\1\27\1\2\1\0\1\30"+
    "\1\0\1\31\1\0\1\30\11\0\1\32\1\33\1\0"+
    "\1\34\1\0\1\35\2\0\1\36\1\37\1\40\1\0"+
    "\1\22\1\0\1\41\2\22\1\42\12\22\1\43\11\22"+
    "\1\44\2\22\1\45\33\22\1\46\1\13\6\0\1\30"+
    "\1\47\2\0\1\34\1\50\14\22\1\51\12\22\1\52"+
    "\5\22\1\53\3\22\1\54\4\22\1\55\20\22\1\56"+
    "\3\22\1\57\2\22\1\60\3\22\1\61\1\22\1\46"+
    "\1\13\10\0\1\62\5\22\1\63\1\22\1\64\10\22"+
    "\1\65\1\22\1\66\1\67\1\70\21\22\1\71\11\22"+
    "\1\72\10\22\1\73\3\22\1\74\3\22\2\13\4\0"+
    "\2\22\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\22\1\104\6\22\1\105\1\106\4\22\1\107\3\22"+
    "\1\110\6\22\1\111\3\22\1\112\3\22\1\113\2\22"+
    "\1\114\1\22\1\115\1\116\1\117\1\120\1\121\1\22"+
    "\1\122\1\123\1\124\1\0\1\125\1\126\1\127\4\22"+
    "\1\130\2\22\1\131\11\22\1\132\5\22\1\133\2\22"+
    "\1\134\2\22\1\135\1\136\1\137\1\140\1\141\1\142"+
    "\4\22\1\143\1\144\1\145\1\146\1\147\2\22\1\150"+
    "\4\22\1\151\1\152\1\22\1\153\1\154\1\22\1\155"+
    "\1\22\1\156\1\157\1\22\1\160\1\161\4\22\1\162"+
    "\1\22\1\163\2\22\1\164\3\22\1\165\1\166\1\167"+
    "\1\170\1\22\1\171\1\172\4\22\1\173\1\174";

  private static int [] zzUnpackAction() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\113\0\341\0\u012c\0\u0177\0\113"+
    "\0\113\0\u01c2\0\113\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339"+
    "\0\113\0\113\0\u0384\0\u03cf\0\u041a\0\u0465\0\u04b0\0\u04fb"+
    "\0\113\0\113\0\113\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\113"+
    "\0\113\0\u0b22\0\341\0\113\0\u0b6d\0\113\0\u0bb8\0\u0c03"+
    "\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\u0e10\0\u0e5b"+
    "\0\u0ea6\0\113\0\113\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u02ee"+
    "\0\u101d\0\113\0\113\0\113\0\u1068\0\u10b3\0\u0546\0\113"+
    "\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u04b0\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u04b0"+
    "\0\u1770\0\u17bb\0\u04b0\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a"+
    "\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u0bb8\0\113"+
    "\0\u2247\0\u2292\0\u2292\0\113\0\u22dd\0\u2328\0\u2373\0\u23be"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616"+
    "\0\u04b0\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u2823"+
    "\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b"+
    "\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3"+
    "\0\u2d1e\0\u2d69\0\u04b0\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0"+
    "\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\u31ce\0\u3219\0\u04b0\0\u3264\0\u32af\0\u32fa\0\u04b0"+
    "\0\u3345\0\u3390\0\u04b0\0\u33db\0\u3426\0\u3471\0\u04b0\0\u34bc"+
    "\0\113\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9"+
    "\0\u3714\0\u375f\0\113\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6"+
    "\0\u04b0\0\u3921\0\u04b0\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98"+
    "\0\u3ae3\0\u3b2e\0\u3b79\0\u04b0\0\u3bc4\0\u04b0\0\u3c0f\0\u04b0"+
    "\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67"+
    "\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u40bf"+
    "\0\u410a\0\u04b0\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc"+
    "\0\u4317\0\u4362\0\u43ad\0\u04b0\0\u43f8\0\u4443\0\u448e\0\u44d9"+
    "\0\u4524\0\u456f\0\u45ba\0\u4605\0\u04b0\0\u4650\0\u469b\0\u46e6"+
    "\0\u04b0\0\u4731\0\u477c\0\u47c7\0\u3552\0\u359d\0\u4812\0\u485d"+
    "\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u04b0\0\u04b0\0\u04b0"+
    "\0\u04b0\0\u04b0\0\u04b0\0\u4a1f\0\u04b0\0\u4a6a\0\u4ab5\0\u4b00"+
    "\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u04b0\0\u4c77\0\u4cc2\0\u4d0d"+
    "\0\u4d58\0\u04b0\0\u4da3\0\u4dee\0\u4e39\0\u04b0\0\u4e84\0\u4ecf"+
    "\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u04b0\0\u5046\0\u5091\0\u50dc"+
    "\0\u04b0\0\u5127\0\u5172\0\u51bd\0\u04b0\0\u5208\0\u5253\0\u04b0"+
    "\0\u529e\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u52e9\0\u04b0"+
    "\0\u04b0\0\u04b0\0\u5334\0\113\0\113\0\u04b0\0\u537f\0\u53ca"+
    "\0\u5415\0\u5460\0\u04b0\0\u54ab\0\u54f6\0\u04b0\0\u5541\0\u558c"+
    "\0\u55d7\0\u5622\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799\0\u04b0"+
    "\0\u57e4\0\u582f\0\u587a\0\u58c5\0\u5910\0\u04b0\0\u595b\0\u59a6"+
    "\0\u04b0\0\u59f1\0\u5a3c\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0"+
    "\0\113\0\u5a87\0\u5ad2\0\u5b1d\0\u5b68\0\u04b0\0\u04b0\0\u04b0"+
    "\0\u04b0\0\u04b0\0\u5bb3\0\u5bfe\0\u5c49\0\u5c94\0\u5cdf\0\u5d2a"+
    "\0\u5d75\0\u04b0\0\u04b0\0\u5dc0\0\u04b0\0\u04b0\0\u5e0b\0\u5e56"+
    "\0\u5ea1\0\u04b0\0\u04b0\0\u5eec\0\u04b0\0\u04b0\0\u5f37\0\u5f82"+
    "\0\u5fcd\0\u6018\0\u04b0\0\u6063\0\u04b0\0\u60ae\0\u60f9\0\u04b0"+
    "\0\u6144\0\u618f\0\u61da\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u6225"+
    "\0\u04b0\0\u04b0\0\u6270\0\u62bb\0\u6306\0\u6351\0\u04b0\0\u04b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\3\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\14\27\1\30"+
    "\2\27\1\31\1\32\1\33\1\27\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\27\1\43\1\44\1\27"+
    "\1\45\1\46\1\27\1\47\1\27\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\2\62"+
    "\1\2\114\0\3\3\104\0\2\3\1\0\5\63\1\64"+
    "\44\63\1\65\40\63\6\0\1\66\104\0\7\67\1\70"+
    "\10\67\1\71\5\67\1\72\7\67\1\73\4\67\1\74"+
    "\2\67\1\75\3\67\1\76\10\67\1\77\6\67\1\100"+
    "\5\67\1\101\12\67\13\0\1\102\114\0\1\103\113\0"+
    "\1\104\1\0\4\105\101\0\1\106\4\0\1\107\111\0"+
    "\1\105\1\0\4\110\11\0\1\111\24\0\1\111\46\0"+
    "\1\105\1\0\4\20\11\0\1\111\24\0\1\111\56\0"+
    "\1\112\114\0\1\113\112\0\1\114\140\0\1\115\54\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\30\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\116\1\0"+
    "\30\27\2\0\2\27\1\0\55\117\1\120\35\117\20\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\1\27\1\121"+
    "\16\27\1\122\1\123\3\27\1\124\2\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\15\27"+
    "\1\125\2\27\1\126\7\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\1\127\11\27\1\130"+
    "\2\27\1\131\4\27\1\132\5\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\1\133\3\27"+
    "\1\134\3\27\1\135\4\27\1\136\11\27\1\137\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\2\27\1\140\7\27\1\141\1\27\1\142\11\27\1\143"+
    "\1\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\10\27\1\144\1\27\1\145\2\27\1\146"+
    "\5\27\1\147\4\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\5\27\1\150\5\27\1\151"+
    "\1\152\4\27\1\153\6\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\154\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\10\27\1\155\17\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\1\156\3\27\1\157"+
    "\10\27\1\160\5\27\1\161\4\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\1\162\17\27"+
    "\1\163\2\27\1\164\4\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\165\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\166\2\27\1\167\12\27\1\170\1\171"+
    "\1\27\1\172\2\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\7\27\1\173\10\27\1\174"+
    "\2\27\1\175\3\27\1\176\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\177\4\27"+
    "\1\200\6\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\1\201\3\27\1\202\10\27\1\203"+
    "\12\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\7\27\1\204\20\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\7\27\1\205"+
    "\20\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\10\27\1\206\17\27\2\0\2\27\2\0"+
    "\3\3\14\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\30\27\2\0\2\62\1\0\2\63\2\0\104\63\1\0"+
    "\1\63\1\0\7\67\1\64\42\67\1\76\40\67\40\0"+
    "\1\207\24\0\1\207\25\0\7\67\1\210\42\67\1\76"+
    "\47\67\1\70\42\67\1\76\47\67\1\64\22\67\1\211"+
    "\17\67\1\76\3\67\1\212\43\67\1\64\37\67\1\213"+
    "\2\67\1\76\26\67\1\214\20\67\1\64\34\67\1\215"+
    "\5\67\1\76\23\67\1\216\23\67\1\217\42\67\1\76"+
    "\47\67\1\64\42\67\1\76\3\67\1\212\43\67\1\64"+
    "\42\67\1\76\26\67\1\214\20\67\1\64\42\67\1\76"+
    "\23\67\1\216\14\67\16\0\1\220\114\0\4\105\11\0"+
    "\1\111\24\0\1\111\30\0\12\106\1\221\100\106\2\107"+
    "\1\0\110\107\13\0\1\222\1\0\1\222\2\0\4\223"+
    "\166\0\1\224\33\0\4\27\6\0\10\27\1\225\6\27"+
    "\3\0\1\27\1\0\30\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\21\27\1\226\6\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\20\27\1\227\7\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\27\27\1\230\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\1\231\27\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\15\27\1\232\12\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\4\27"+
    "\1\233\23\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\21\27\1\234\1\235\5\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\1\236\14\27\1\237\12\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\240\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\26\27\1\241\1\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\20\27\1\242\7\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\5\27\1\243\22\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\2\27\1\244\25\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\245\13\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\7\27\1\246\20\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\21\27\1\247\6\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\23\27\1\250\4\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\22\27\1\251\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\252\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\15\27\1\253\12\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\20\27\1\254\7\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\255\13\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\16\27\1\256\11\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\2\27\1\257\12\27\1\260\3\27\1\261\1\262"+
    "\5\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\27\27\1\263\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\26\27\1\264\1\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\13\27\1\265\14\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\25\27\1\266\2\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\267\3\27\1\270\1\27\1\271\5\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\12\27\1\272\1\273\14\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\20\27\1\274"+
    "\7\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\10\27\1\275\4\27\1\276\12\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\1\27\1\277\26\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\10\27\1\300\6\27\1\301"+
    "\1\27\1\302\1\303\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\12\27\1\304\15\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\1\305\27\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\1\306\17\27\1\307\7\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\16\27\1\310\11\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\10\27\1\311\17\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\20\27\1\312\7\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\1\313\26\27\1\314"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\16\27\1\315\11\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\16\27\1\316\11\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\21\27\1\317\6\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\320\3\27"+
    "\1\321\17\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\20\27\1\322\7\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\2\27"+
    "\1\323\25\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\10\27\1\324\17\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\4\27"+
    "\1\325\3\27\1\326\17\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\16\27\1\327\11\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\330\23\27\2\0\2\27\41\0\1\331"+
    "\24\0\1\331\45\0\3\332\10\0\1\333\14\0\1\334"+
    "\6\0\1\333\24\0\1\334\6\0\7\67\1\64\32\67"+
    "\1\335\7\67\1\76\47\67\1\64\42\67\1\76\15\67"+
    "\1\336\31\67\1\64\32\67\1\337\7\67\1\76\47\67"+
    "\1\64\42\67\1\76\15\67\1\340\31\67\1\64\37\67"+
    "\1\341\2\67\1\76\47\67\1\64\42\67\1\76\26\67"+
    "\1\342\11\67\12\106\1\221\4\106\1\343\73\106\20\0"+
    "\4\223\107\0\4\27\6\0\7\27\1\344\7\27\3\0"+
    "\1\27\1\0\30\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\22\27\1\345\5\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\1\346\27\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\14\27\1\347\13\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\10\27"+
    "\1\350\17\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\12\27\1\351\15\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\1\352"+
    "\27\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\4\27\1\353\23\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\2\27\1\354"+
    "\25\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\21\27\1\355\6\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\14\27\1\356"+
    "\13\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\2\27\1\357\16\27\1\360\1\361\5\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\20\27\1\362\7\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\1\363\27\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\22\27\1\364\5\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\1\365\27\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\15\27"+
    "\1\366\12\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\4\27\1\367\23\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\13\27"+
    "\1\370\14\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\4\27\1\371\23\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\1\372"+
    "\27\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\1\373\27\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\374\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\2\27\1\375\25\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\12\27\1\376\15\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\12\27\1\377\15\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\23\27\1\u0100\4\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\22\27\1\u0101\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u0102\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\21\27\1\u0103\6\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u0104\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u0105\23\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\22\27\1\u0106\5\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\u0107\13\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u0108\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\7\27\1\u0109\20\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\12\27\1\u010a\15\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u010b\23\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\u010c\7\27"+
    "\1\u010d\3\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\22\27\1\u010e\5\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\12\27"+
    "\1\u010f\15\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\5\27\1\u0110\22\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\23\27"+
    "\1\u0111\4\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\15\27\1\u0112\12\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\23\27"+
    "\1\u0113\4\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\5\27\1\u0114\22\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\16\27"+
    "\1\u0115\11\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\22\27\1\u0116\5\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\10\27"+
    "\1\u0117\17\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\4\27\1\u0118\23\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\22\27"+
    "\1\u0119\5\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\15\27\1\u011a\12\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\10\27"+
    "\1\u011b\17\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\12\27\1\u011c\15\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\4\27"+
    "\1\u011d\23\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\4\27\1\u011e\23\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\14\27"+
    "\1\u011f\13\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\20\27\1\u0120\7\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\3\27"+
    "\1\u0121\24\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\20\27\1\u0122\7\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\12\27"+
    "\1\u0123\15\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\12\27\1\u0124\15\27\2\0\2\27"+
    "\21\0\3\332\110\0\2\u0125\111\0\4\u0126\6\0\5\u0126"+
    "\17\0\6\u0126\27\0\7\67\1\64\35\67\1\u0127\4\67"+
    "\1\76\47\67\1\64\42\67\1\76\24\67\1\u0128\22\67"+
    "\1\64\32\67\1\u0129\7\67\1\76\47\67\1\64\42\67"+
    "\1\76\15\67\1\u0129\31\67\1\64\25\67\1\u012a\14\67"+
    "\1\76\47\67\1\64\42\67\1\76\7\67\1\u012a\30\67"+
    "\20\0\4\27\6\0\13\27\1\u012b\3\27\3\0\1\27"+
    "\1\0\30\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\20\27\1\u012c\7\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\27\27"+
    "\1\u012d\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\2\27\1\u012e\25\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\22\27\1\u012f"+
    "\5\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\11\27\1\u0130\16\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\7\27\1\u0131"+
    "\20\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\21\27\1\u0132\6\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\4\27\1\u0133"+
    "\23\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\23\27\1\u0134\4\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\22\27\1\u0135"+
    "\5\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\10\27\1\u0136\17\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\1\u0137\27\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\23\27\1\u0138\4\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\13\27\1\u0139\14\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\10\27\1\u013a\17\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\u013b\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\12\27\1\u013c\15\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\22\27\1\u013d\5\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\1\u013e\27\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\22\27\1\u013f\5\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\4\27\1\u0140\23\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\23\27\1\u0141\4\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\22\27\1\u0142\5\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\4\27\1\u0143\23\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\20\27\1\u0144\7\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\4\27\1\u0145\23\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\3\27\1\u0146\24\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\21\27\1\u0147\6\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\27\27\1\u0148\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\23\27\1\u0149\4\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\22\27"+
    "\1\u014a\5\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\10\27\1\u014b\17\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\14\27"+
    "\1\u014c\13\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\22\27\1\u014d\5\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\1\u014e"+
    "\27\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\4\27\1\u014f\23\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\10\27\1\u0150"+
    "\17\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\27\27\1\u0151\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\10\27\1\u0152\17\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\23\27\1\u0153\4\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\20\27\1\u0154\7\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u0155\23\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\10\27\1\u0156\17\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\u0157\13\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\20\27\1\u0158\7\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\2\27\1\u0159\25\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\25\27\1\u015a\2\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\22\27\1\u015b\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u015c\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\22\27\1\u015d\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\6\27\1\u015e\21\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\1\u015f\27\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\4\27\1\u0160\23\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\4\27\1\u0161\23\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\3\27\1\u0162\24\27\2\0"+
    "\2\27\1\0\7\67\1\64\25\67\1\u0163\14\67\1\76"+
    "\47\67\1\64\42\67\1\76\7\67\1\u0163\37\67\1\u0164"+
    "\42\67\1\76\47\67\1\u0165\42\67\1\76\40\67\20\0"+
    "\4\27\6\0\14\27\1\u0166\2\27\3\0\1\27\1\0"+
    "\30\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\1\u0167\27\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\11\27\1\u0168\16\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\20\27\1\u0169\7\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\u016a\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\27\27\1\u016b\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\12\27\1\u016c\15\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\10\27\1\u016d\17\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\5\27\1\u016e\22\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\3\27\1\u016f\24\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\12\27\1\u0170\15\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\2\27\1\u0171\25\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\10\27\1\u0172\17\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\13\27\1\u0173\14\27\2\0\2\27\21\0\4\27\6\0"+
    "\17\27\3\0\1\27\1\0\3\27\1\u0174\24\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\1\u0175\27\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\5\27\1\u0176\6\27\1\u0177\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\22\27\1\u0178\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\16\27\1\u0179\11\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\16\27\1\u017a\11\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\12\27\1\u017b\15\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\23\27\1\u017c\4\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\u017d\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\22\27\1\u017e\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\22\27\1\u017f\5\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\2\27\1\u0180\25\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\2\27\1\u0181\25\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\20\27\1\u0182\7\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\20\27\1\u0183\7\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\u0184\13\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\2\27\1\u0185\25\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\6\27\1\u0186\21\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\7\27\1\u0187\20\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\27\27\1\u0188\2\0\2\27\1\0\7\67\1\u0189"+
    "\42\67\1\76\40\67\20\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\2\27\1\u018a\25\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\4\27\1\u018b"+
    "\23\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\20\27\1\u018c\7\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\23\27\1\u018d"+
    "\4\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\22\27\1\u018e\5\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\2\27\1\u018f"+
    "\25\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\21\27\1\u0190\6\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\27\27\1\u0191"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\7\27\1\u0192\20\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\15\27\1\u0193\12\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u0194\23\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u0195\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\3\27\1\u0196\24\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\1\u0197\27\27\2\0"+
    "\2\27\21\0\4\27\6\0\17\27\3\0\1\27\1\0"+
    "\1\u0198\27\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\1\u0199\27\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\4\27\1\u019a"+
    "\23\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\12\27\1\u019b\15\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\20\27\1\u019c"+
    "\7\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\6\27\1\u019d\21\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\4\27\1\u019e"+
    "\23\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\22\27\1\u019f\5\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\4\27\1\u01a0"+
    "\23\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\2\27\1\u01a1\25\27\2\0\2\27\21\0"+
    "\4\27\6\0\17\27\3\0\1\27\1\0\22\27\1\u01a2"+
    "\5\27\2\0\2\27\21\0\4\27\6\0\17\27\3\0"+
    "\1\27\1\0\27\27\1\u01a3\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u01a4\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u01a5\23\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\u01a6\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\u01a7\13\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\u01a8\1\0\30\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\15\27"+
    "\1\u01a9\12\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\2\27\1\u01aa\25\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\12\27"+
    "\1\u01ab\15\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\2\27\1\u01ac\25\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\27\1\0\14\27"+
    "\1\u01ad\13\27\2\0\2\27\21\0\4\27\6\0\17\27"+
    "\3\0\1\27\1\0\4\27\1\u01ae\23\27\2\0\2\27"+
    "\21\0\4\27\6\0\17\27\3\0\1\u01af\1\0\30\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u01b0\23\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\u01b1\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\22\27\1\u01b2\5\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\15\27\1\u01b3\12\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\5\27\1\u01b4\22\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u01b5\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u01b6\23\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\3\27\1\u01b7\24\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\15\27\1\u01b8\12\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\22\27\1\u01b9\5\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\21\27\1\u01ba\6\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\14\27\1\u01bb\13\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\14\27\1\u01bc\13\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\2\27\1\u01bd\25\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\2\27\1\u01be\25\27\2\0\2\27\21\0\4\27"+
    "\6\0\17\27\3\0\1\27\1\0\4\27\1\u01bf\23\27"+
    "\2\0\2\27\21\0\4\27\6\0\17\27\3\0\1\27"+
    "\1\0\4\27\1\u01c0\23\27\2\0\2\27\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25500];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\2\11\1\1\1\11"+
    "\5\1\2\11\6\1\3\11\24\1\2\11\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\1\11\0\2\11\1\0"+
    "\1\1\1\0\1\1\2\0\3\11\1\0\1\1\1\0"+
    "\1\11\70\1\6\0\1\1\1\11\2\0\1\1\1\11"+
    "\104\1\1\11\1\1\10\0\1\11\103\1\4\0\70\1"+
    "\1\0\2\11\43\1\1\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _HackLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HackLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 125: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 126: break;
          case 3:
            { return T_EM;
            }
          // fall through
          case 127: break;
          case 4:
            { return T_DOLLAR;
            }
          // fall through
          case 128: break;
          case 5:
            { return T_LPAREN;
            }
          // fall through
          case 129: break;
          case 6:
            { return T_RPAREN;
            }
          // fall through
          case 130: break;
          case 7:
            { return T_PLUS;
            }
          // fall through
          case 131: break;
          case 8:
            { return T_COMMA;
            }
          // fall through
          case 132: break;
          case 9:
            { return T_MINUS;
            }
          // fall through
          case 133: break;
          case 10:
            { return T_DOT;
            }
          // fall through
          case 134: break;
          case 11:
            { return INTEGER;
            }
          // fall through
          case 135: break;
          case 12:
            { return T_COLON;
            }
          // fall through
          case 136: break;
          case 13:
            { return T_SEMICOLON;
            }
          // fall through
          case 137: break;
          case 14:
            { return T_LT;
            }
          // fall through
          case 138: break;
          case 15:
            { return T_EQ;
            }
          // fall through
          case 139: break;
          case 16:
            { return T_GT;
            }
          // fall through
          case 140: break;
          case 17:
            { return T_QM;
            }
          // fall through
          case 141: break;
          case 18:
            { return IDENTIFIER;
            }
          // fall through
          case 142: break;
          case 19:
            { return T_LBRACKET;
            }
          // fall through
          case 143: break;
          case 20:
            { return T_BACKSLASH;
            }
          // fall through
          case 144: break;
          case 21:
            { return T_RBRACKET;
            }
          // fall through
          case 145: break;
          case 22:
            { return T_LBRACE;
            }
          // fall through
          case 146: break;
          case 23:
            { return T_RBRACE;
            }
          // fall through
          case 147: break;
          case 24:
            { return STRING;
            }
          // fall through
          case 148: break;
          case 25:
            { return T_DOLLAR_DOLLAR;
            }
          // fall through
          case 149: break;
          case 26:
            { return T_PLUS_PLUS;
            }
          // fall through
          case 150: break;
          case 27:
            { return T_MINUS_MINUS;
            }
          // fall through
          case 151: break;
          case 28:
            { return FLOAT;
            }
          // fall through
          case 152: break;
          case 29:
            { return INLINE_COMMENT;
            }
          // fall through
          case 153: break;
          case 30:
            { return T_LT_LT;
            }
          // fall through
          case 154: break;
          case 31:
            { return T_GT_ET;
            }
          // fall through
          case 155: break;
          case 32:
            { return T_GT_GT;
            }
          // fall through
          case 156: break;
          case 33:
            { return EXPRESSION_TREE_IDENTIFIER;
            }
          // fall through
          case 157: break;
          case 34:
            { return T_AS;
            }
          // fall through
          case 158: break;
          case 35:
            { return T_DO;
            }
          // fall through
          case 159: break;
          case 36:
            { return T_IF;
            }
          // fall through
          case 160: break;
          case 37:
            { return T_IS;
            }
          // fall through
          case 161: break;
          case 38:
            { return OPEN_TAG;
            }
          // fall through
          case 162: break;
          case 39:
            { return T_THREE_DOTS;
            }
          // fall through
          case 163: break;
          case 40:
            { return T_AS_OPTIONAL;
            }
          // fall through
          case 164: break;
          case 41:
            { return T_CTX;
            }
          // fall through
          case 165: break;
          case 42:
            { return T_FOR;
            }
          // fall through
          case 166: break;
          case 43:
            { return T_INT;
            }
          // fall through
          case 167: break;
          case 44:
            { return T_NEW;
            }
          // fall through
          case 168: break;
          case 45:
            { return T_NUM;
            }
          // fall through
          case 169: break;
          case 46:
            { return T_TRY;
            }
          // fall through
          case 170: break;
          case 47:
            { return T_USE;
            }
          // fall through
          case 171: break;
          case 48:
            { return T_VEC;
            }
          // fall through
          case 172: break;
          case 49:
            { return T_XHP;
            }
          // fall through
          case 173: break;
          case 50:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 174: break;
          case 51:
            { return T_BOOL;
            }
          // fall through
          case 175: break;
          case 52:
            { return T_CASE;
            }
          // fall through
          case 176: break;
          case 53:
            { return T_DICT;
            }
          // fall through
          case 177: break;
          case 54:
            { return T_ECHO;
            }
          // fall through
          case 178: break;
          case 55:
            { return T_ELSE;
            }
          // fall through
          case 179: break;
          case 56:
            { return T_ENUM;
            }
          // fall through
          case 180: break;
          case 57:
            { return T_NULL;
            }
          // fall through
          case 181: break;
          case 58:
            { return T_SELF;
            }
          // fall through
          case 182: break;
          case 59:
            { return T_TYPE;
            }
          // fall through
          case 183: break;
          case 60:
            { return T_VOID;
            }
          // fall through
          case 184: break;
          case 61:
            { return T_ARRAY;
            }
          // fall through
          case 185: break;
          case 62:
            { return T_ASYNC;
            }
          // fall through
          case 186: break;
          case 63:
            { return T_AWAIT;
            }
          // fall through
          case 187: break;
          case 64:
            { return T_BREAK;
            }
          // fall through
          case 188: break;
          case 65:
            { return T_CATCH;
            }
          // fall through
          case 189: break;
          case 66:
            { return T_CLASS;
            }
          // fall through
          case 190: break;
          case 67:
            { return T_CLONE;
            }
          // fall through
          case 191: break;
          case 68:
            { return T_CONST;
            }
          // fall through
          case 192: break;
          case 69:
            { return T_FINAL;
            }
          // fall through
          case 193: break;
          case 70:
            { return T_FLOAT;
            }
          // fall through
          case 194: break;
          case 71:
            { return T_INOUT;
            }
          // fall through
          case 195: break;
          case 72:
            { return T_MIXED;
            }
          // fall through
          case 196: break;
          case 73:
            { return T_PRINT;
            }
          // fall through
          case 197: break;
          case 74:
            { return T_REIFY;
            }
          // fall through
          case 198: break;
          case 75:
            { return T_SHAPE;
            }
          // fall through
          case 199: break;
          case 76:
            { return T_SUPER;
            }
          // fall through
          case 200: break;
          case 77:
            { return T_THROW;
            }
          // fall through
          case 201: break;
          case 78:
            { return T_TRAIT;
            }
          // fall through
          case 202: break;
          case 79:
            { return T_TUPLE;
            }
          // fall through
          case 203: break;
          case 80:
            { return T_UNSET;
            }
          // fall through
          case 204: break;
          case 81:
            { return T_USING;
            }
          // fall through
          case 205: break;
          case 82:
            { return T_WHERE;
            }
          // fall through
          case 206: break;
          case 83:
            { return T_WHILE;
            }
          // fall through
          case 207: break;
          case 84:
            { return T_YIELD;
            }
          // fall through
          case 208: break;
          case 85:
            { return NULL;
            }
          // fall through
          case 209: break;
          case 86:
            { return TRUE;
            }
          // fall through
          case 210: break;
          case 87:
            { return T_LIST;
            }
          // fall through
          case 211: break;
          case 88:
            { return T_DARRAY;
            }
          // fall through
          case 212: break;
          case 89:
            { return T_ELSEIF;
            }
          // fall through
          case 213: break;
          case 90:
            { return T_KEYSET;
            }
          // fall through
          case 214: break;
          case 91:
            { return T_PARENT;
            }
          // fall through
          case 215: break;
          case 92:
            { return T_PUBLIC;
            }
          // fall through
          case 216: break;
          case 93:
            { return T_RETURN;
            }
          // fall through
          case 217: break;
          case 94:
            { return T_STATIC;
            }
          // fall through
          case 218: break;
          case 95:
            { return T_STRING;
            }
          // fall through
          case 219: break;
          case 96:
            { return T_SWITCH;
            }
          // fall through
          case 220: break;
          case 97:
            { return T_VARRAY;
            }
          // fall through
          case 221: break;
          case 98:
            { return FALSE;
            }
          // fall through
          case 222: break;
          case 99:
            { return T_DEFAULT;
            }
          // fall through
          case 223: break;
          case 100:
            { return T_DYNAMIC;
            }
          // fall through
          case 224: break;
          case 101:
            { return T_EXTENDS;
            }
          // fall through
          case 225: break;
          case 102:
            { return T_FINALLY;
            }
          // fall through
          case 226: break;
          case 103:
            { return T_FOREACH;
            }
          // fall through
          case 227: break;
          case 104:
            { return T_INCLUDE;
            }
          // fall through
          case 228: break;
          case 105:
            { return T_NEWTYPE;
            }
          // fall through
          case 229: break;
          case 106:
            { return T_NONNULL;
            }
          // fall through
          case 230: break;
          case 107:
            { return T_NOTHING;
            }
          // fall through
          case 231: break;
          case 108:
            { return T_PRIVATE;
            }
          // fall through
          case 232: break;
          case 109:
            { return T_REQUIRE;
            }
          // fall through
          case 233: break;
          case 110:
            { return T_ABSTRACT;
            }
          // fall through
          case 234: break;
          case 111:
            { return T_ARRAYKEY;
            }
          // fall through
          case 235: break;
          case 112:
            { return T_CONTINUE;
            }
          // fall through
          case 236: break;
          case 113:
            { return T_FUNCTION;
            }
          // fall through
          case 237: break;
          case 114:
            { return T_INTERNAL;
            }
          // fall through
          case 238: break;
          case 115:
            { return T_NORETURN;
            }
          // fall through
          case 239: break;
          case 116:
            { return T_RESOURCE;
            }
          // fall through
          case 240: break;
          case 117:
            { return T_INSTEADOF;
            }
          // fall through
          case 241: break;
          case 118:
            { return T_INTERFACE;
            }
          // fall through
          case 242: break;
          case 119:
            { return T_NAMESPACE;
            }
          // fall through
          case 243: break;
          case 120:
            { return T_PROTECTED;
            }
          // fall through
          case 244: break;
          case 121:
            { return T_CONCURRENT;
            }
          // fall through
          case 245: break;
          case 122:
            { return T_IMPLEMENTS;
            }
          // fall through
          case 246: break;
          case 123:
            { return T_INCLUDE_ONCE;
            }
          // fall through
          case 247: break;
          case 124:
            { return T_REQUIRE_ONCE;
            }
          // fall through
          case 248: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
